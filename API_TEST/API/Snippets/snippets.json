{
	"Connection code for a rest api using express and mongodb": {
		"prefix": "mongoDB_connection",
		"body": [
			"// Change config info in your .env file while devlopping",
			"require('dotenv').config()",
			"const mongoose = require(\"mongoose\");",
			"",
			"//[MONGOOSE] DeprecationWarning: Mongoose: the `strictQuery` option will be switched back to `false` by default in Mongoose 7. Use `mongoose.set('strictQuery', false);` if you want to prepare for this change. Or use `mongoose.set('strictQuery', true);` to suppress this warning.",
			"mongoose.set('strictQuery', true);",
			"",
			"// Connecting to mongodb with mongoose",
			"mongoose.connect(",
			"    process.env.$YOUR_DB_URI_NAME_IN_ENV, ",
			"    {",
			"      useNewUrlParser: true,",
			"      useUnifiedTopology: true",
			"    }",
			"  );",
			"  ",
			"  ",
			"",
			"let dbConnection;",
			"",
			"// Exporting basic function to interact with the db",
			"module.exports = {",
			"    connectToServer: function (callback) {",
			"        dbConnection = mongoose.connection;",
			"        dbConnection.on(\"error\", console.error.bind(console, \"Connection error: \"));",
			"        dbConnection.once(\"open\", function () {",
			"            console.log(\"Connexion etablie.\")",
			"        })",
			"    },",
			"",
			"    getDb: function () {",
			"        return dbConnection;",
			"    },",
			"}"
		],
		"description": "Connection code for a rest api using express and mongodb"
	},

	"Creating a schema for mondoDb with mongoose": {
		"prefix": "mongoDB_schema",
		"body": [
			"const mongoose = require(\"mongoose\");",
			"",
			"const $SchemaName = new mongoose.Schema({",
			"  $ExampleProperty: {",
			"    type: String,",
			"    required: true,",
			"  },",
			"});",
			"",
			"const $ModelNameToBeExported = mongoose.model(\"$ModelNameToBeExported\", $SchemaName);",
			"",
			"module.exports = $ModelNameToBeExported;"
		],
		"description": "Creating a schema for mondoDb with mongoose"
	},

	"Creating a router for all api routes to a certain model CRUD operations": {
		"prefix": "mongoDb_express_router",
		"body": [
			"const express = require('express')",
			"const router = express.Router()",
			"const $ModelForThisRoute = require('../Models/$ModelFileName')",
			"",
			"// Tous les $ModelFileName",
			"router.get('/', async (req, res) => {",
			"    /*",
			"        #swagger.tags = ['$ModelForThisRoute']",
			"        #swagger.description = 'Endpoint to get all $ModelFileName'",
			"    */",
			"    try {",
			"        /*",
			"            #swagger.responses[200] = {",
			"                schema: { \"$ref: \"#/definitions/$ModelForThisRoute\" },",
			"                description: \"$ModelForThisRoute added successfully.\"",
			"            }",
			"        */",
			"        const $JsonListOfThisModel = await $ModelForThisRoute.find()",
			"        res.status(200).send($JsonListOfThisModel)",
			"    } catch (err){",
			"        res.status(500).json({ message: err.message })",
			"    }",
			"})",
			"",
			"",
			"// $ModelForThisRoute par id",
			"router.get('/:id', $$MiddlewareToGetModelInstance,  (req, res) => {",
			"    /*",
			"        #swagger.tags = ['$ModelForThisRoute']",
			"        #swagger.description = 'Endpoint to get $ModelForThisRoute by id'",
			"    */",
			"    /*   #swagger.parameters['obj'] = {",
			"            in: 'body',",
			"            description: 'Getting a $ModelForThisRoute by id',",
			"            schema: { $ref: '#/definitions/$ModelForThisRoute' }",
			"        }",
			"    */",
			"    try {",
			"        /* #swagger.responses[200] = {",
			"            description: 'Getting a $ModelForThisRoute successfully',",
			"            schema: { $ref: '#/definitions/$ModelForThisRoute' }",
			"        */",
			"        res.status(200).send(res.$ModelInstance)",
			"    } catch (err) {",
			"        /* #swagger.responses[400] = {",
			"            description: 'Failed to find $ModelInstance',",
			"            schema: { ",
			"                message: \"$MessageWhenNotFound\"",
			"             }",
			"        */",
			"        return res.status(404).json({ message: \"$MessageWhenNotFound\"})",
			"    }",
			"})",
			"",
			"",
			"// Creer un $ModelForThisRoute dans la base de donnees",
			"router.post('/', async (req, res) => {",
			"    /*",
			"        #swagger.tags = ['$ModelForThisRoute']",
			"        #swagger.description = 'Endpoint to add a new $ModelInstance'",
			"    */",
			"   /*   #swagger.parameters['obj'] = {",
			"        in: 'body',",
			"        description: 'Adding new $ModelInstance.',",
			"        schema: { $ref: '#/definitions/$ModelForThisRoute' }",
			"   }",
			"   */",
			"    const $ModelInstance = new $ModelForThisRoute({",
			"        titre: req.body.titre,",
			"        synopsis: req.body.synopsis,",
			"        annee: req.body.annee,",
			"        duree: req.body.duree,",
			"        posterImage: req.body.posterImage",
			"    })",
			"",
			"    try {",
			"        const $ModelInstance = await $ModelInstance.save()",
			"        /* #swagger.responses[201] = {",
			"            description: '$ModelForThisRoute successfully created',",
			"            schema: { $ref: '#/definitions/someDefinition' }",
			"        */",
			"        res.status(201).json($ModelInstance)",
			"    } catch (err) {",
			"        /* #swagger.responses[400] = {",
			"            description: 'Bad data from client',",
			"            schema: { $ref: '#/definitions/someDefinition' }",
			"        */",
			"        res.status(400).json({ message: err.message })",
			"    }",
			"})",
			"",
			"",
			"router.patch('/:id', $$MiddlewareToGetModelInstance, async (req, res) => {",
			"    /*",
			"        #swagger.tags = ['$ModelForThisRoute']",
			"        #swagger.description = 'Endpoint to patch a $ModelInstance'",
			"    */",
			"   /*   #swagger.parameters['obj'] = {",
			"        in: 'body',",
			"        description: 'Getting confirmation of updated $ModelInstance',",
			"        schema: { $ref: '#/definitions/$ModelForThisRoute' }",
			"   }",
			"   */",
			"    if (req.body.titre != null && res.$ModelInstance.titre != req.body.titre) {",
			"        res.$ModelInstance.titre = req.body.titre",
			"    }",
			"",
			"    try {",
			"        const $ModelInstance = await res.$ModelInstance.save()",
			"        res.status(200).json($ModelInstance)",
			"    } catch (err) {",
			"        res.status(400).json({ message: err.message })",
			"    }",
			"})",
			"",
			"",
			"router.delete('/:id', $$MiddlewareToGetModelInstance, async (req, res) => {",
			"    /*",
			"        #swagger.tags = ['$ModelForThisRoute']",
			"        #swagger.description = 'Endpoint to delete a $ModelInstance by its id.'",
			"    */",
			"    try {",
			"        await res.$ModelInstance.remove()",
			"        res.status(200).json({ message: '$ModelForThisRoute retirer de la base de donnees.'})",
			"    } catch (err) {",
			"        // Erreur au niveau du serveur - 500",
			"        res.status(500).json({ message:err.message })",
			"    }",
			"})",
			"",
			"",
			"async function $$MiddlewareToGetModelInstance(req, res, next) {",
			"    let $ModelInstance",
			"    try {",
			"        $ModelInstance = await $ModelForThisRoute.findById(req.params.id)",
			"        if ($ModelInstance == null) {",
			"            return res.status(404).json({ message: \"$MessageWhenNotFound\"})",
			"        }",
			"    } catch (err) {",
			"        return res.status(500).json({ message: err.message })",
			"    }",
			"",
			"    res.$ModelInstance = $ModelInstance",
			"    next()",
			"}",
			"",
			"module.exports = router"
		],
		"description": "Creating a router for all api routes to a certain model CRUD operations"
	},

	"base file runned for api developpement": {
		"prefix": "api_base_file",
		"body": [
			"require('dotenv').config()",
			"const cors = require(\"cors\");",
			"const express = require(\"express\");",
			"const $OneRouterExample = require(\"./$PathToRouterFile\")",
			"",
			"// Documentation",
			"const swaggerUi = require('swagger-ui-express')",
			"const swaggerFile = require('./swagger_output.json')",
			"",
			"// mongoDb connection",
			"const databaseObject = require('./$PathToConnectionFile')",
			"",
			"const PORT = process.env.PORT || $DefaultPortIfNotInEnv",
			"",
			"// Instancier l'application express",
			"// Configuer l'application avec les middlewares comme cors",
			"// définir le type d'objet pour les communications (json)",
			"// ajouter un Router. Router défini dans ./$PathToRouterFile",
			"const app = express()",
			"app.use(cors())",
			"app.use(express.json())",
			"app.use('/$CommonEndPointForAllCallToOneModel', $OneRouterExample)",
			"",
			"app.use('/doc', swaggerUi.serve, swaggerUi.setup(swaggerFile))",
			"",
			"databaseObject.connectToServer();",
			"",
			"app.listen(PORT, () => {",
			"    console.log('Server live on port:', PORT)",
			"})"
		],
		"description": "base file runned for api developpement"
	},
	"base file for swagger configuration": {
		"prefix": "swagger_swagger_file",
		"body": [
			"const swaggerAutogen = require('swagger-autogen')()",
			"",
			"const doc = {",
			"    info: {",
			"        version: \"1.0.0\",",
			"        title: \"$API_NAME\",",
			"        description: \"$API_DESCRIPTION\"",
			"    },",
			"    host: \"localhost:$PORT\",",
			"    basePath: \"/\",",
			"    schemes: ['http', 'https'],",
			"    consumes: ['application/json'],",
			"    produces: ['application/json'],",
			"    tags: [",
			"        {",
			"            \"name\": \"$ModelExemple\",",
			"            \"description\": \"$TagDescription\"",
			"        }",
			"    ],",
			"    definitions: {",
			"        $ModelExemple: {",
			"            // Exemples de proprietes, voir votre schema",
			"            titre: \"Ice Age: Dawn of the dinosaurs\",",
			"            synopsis: \"Ellie is pregnant, making Manny excited and overprotective. However, this causes him to become distant and negligent of Diego, who debates whether he should leave the herd because he thinks that he's losing his edge as a hunter and isn't meant for the family life, and Sid, who begins to wish for a family of his own and adopts three apparently lost eggs that he finds in a cave. Manny tells Sid to put the eggs back, but Sid ignores him and looks after them, which hatch into baby Tyrannosaurus rex the next morning. \",",
			"            annee: \"2009\",",
			"            duree: \"94\",",
			"            posterImage: \"https://lumiere-a.akamaihd.net/v1/images/p_iceagedawnofthedinosaurs_21384_b145ad3f.jpeg\"",
			"        }",
			"    }",
			"}",
			"",
			"const outputFile = './swagger_output.json'",
			"const endpointsFiles = ['./$APIBaseFile.js']",
			"",
			"swaggerAutogen(outputFile, endpointsFiles, doc).then(() => {",
			"    require('./$APIBaseFile.js')",
			"})"
		],
		"description": "base file for swagger configuration"
	}
}